// Code generated by pggen. DO NOT EDIT.

package pgtype

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	// FindAuthorById finds one (or zero) authors by ID.
	FindAuthorByID(ctx context.Context, authorID pgtype.Int4) (FindAuthorByIDRow, error)

	// InsertAuthor inserts an author by name and returns the ID.
	InsertAuthor(ctx context.Context, firstName pgtype.Text, lastName pgtype.Text) (pgtype.Int4, error)

	SelectInt8(ctx context.Context) (pgtype.Int8, error)

	SelectInt4(ctx context.Context) (pgtype.Int4, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn RegisterConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

type RegisterConn interface {
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

func Register(ctx context.Context, conn RegisterConn) error {
  

	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}



const findAuthorByIDSQL = `SELECT * FROM author WHERE author_id = $1;`

type FindAuthorByIDRow struct {
	AuthorID  pgtype.Int4 `json:"author_id"`
	FirstName pgtype.Text `json:"first_name"`
	LastName  pgtype.Text `json:"last_name"`
	Suffix    pgtype.Text `json:"suffix"`
}

// FindAuthorByID implements Querier.FindAuthorByID.
func (q *DBQuerier) FindAuthorByID(ctx context.Context, authorID pgtype.Int4) (FindAuthorByIDRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindAuthorByID")
	rows, err := q.conn.Query(ctx, findAuthorByIDSQL, authorID)
	if err != nil {
		return FindAuthorByIDRow{}, fmt.Errorf("query FindAuthorByID: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (FindAuthorByIDRow, error) {
		var item FindAuthorByIDRow
		if err := row.Scan(&item.AuthorID, // 'author_id', 'AuthorID', 'pgtype.Int4', 'github.com/jackc/pgx/v5/pgtype', 'Int4'
			&item.FirstName, // 'first_name', 'FirstName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.LastName, // 'last_name', 'LastName', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			&item.Suffix, // 'suffix', 'Suffix', 'pgtype.Text', 'github.com/jackc/pgx/v5/pgtype', 'Text'
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const insertAuthorSQL = `INSERT INTO author (first_name, last_name)
VALUES ($1, $2)
RETURNING author_id;`

// InsertAuthor implements Querier.InsertAuthor.
func (q *DBQuerier) InsertAuthor(ctx context.Context, firstName pgtype.Text, lastName pgtype.Text) (pgtype.Int4, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertAuthor")
	rows, err := q.conn.Query(ctx, insertAuthorSQL, firstName, lastName)
	if err != nil {
		return pgtype.Int4{}, fmt.Errorf("query InsertAuthor: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Int4, error) {
		var item pgtype.Int4
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const selectInt8SQL = `SELECT 1234567890123456789::int8 AS my_integer;`

// SelectInt8 implements Querier.SelectInt8.
func (q *DBQuerier) SelectInt8(ctx context.Context) (pgtype.Int8, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SelectInt8")
	rows, err := q.conn.Query(ctx, selectInt8SQL)
	if err != nil {
		return pgtype.Int8{}, fmt.Errorf("query SelectInt8: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Int8, error) {
		var item pgtype.Int8
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const selectInt4SQL = `SELECT 12345::int4 AS my_integer;`

// SelectInt4 implements Querier.SelectInt4.
func (q *DBQuerier) SelectInt4(ctx context.Context) (pgtype.Int4, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SelectInt4")
	rows, err := q.conn.Query(ctx, selectInt4SQL)
	if err != nil {
		return pgtype.Int4{}, fmt.Errorf("query SelectInt4: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (pgtype.Int4, error) {
		var item pgtype.Int4
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
