// Code generated by pggen. DO NOT EDIT.

package citext

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	SearchScreenshots(ctx context.Context, params SearchScreenshotsParams) ([]SearchScreenshotsRow, error)

	SearchScreenshotsOneCol(ctx context.Context, params SearchScreenshotsOneColParams) ([][]Blocks, error)

	InsertScreenshotBlocks(ctx context.Context, screenshotID int, body string) (InsertScreenshotBlocksRow, error)

	ArraysInput(ctx context.Context, arrays Arrays) (Arrays, error)

	UserEmails(ctx context.Context) (UserEmail, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn RegisterConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

type RegisterConn interface {
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

func Register(ctx context.Context, conn RegisterConn) error {
  

	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}



// Arrays represents the Postgres composite type "arrays".
type Arrays struct {
	Texts  []string   `json:"texts"`
	Int8s  []*int     `json:"int8s"`
	Bools  []bool     `json:"bools"`
	Floats []*float64 `json:"floats"`
}

// Blocks represents the Postgres composite type "blocks".
type Blocks struct {
	ID           int    `json:"id"`
	ScreenshotID int    `json:"screenshot_id"`
	Body         string `json:"body"`
}

// UserEmail represents the Postgres composite type "user_email".
type UserEmail struct {
	ID    string      `json:"id"`
	Email pgtype.Text `json:"email"`
}




	// codec_newArrays is a codec for the composite type of the same name
	func codec_newArrays(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("_text")
			if !ok {
				return nil, fmt.Errorf("type not found: _text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("_int8")
			if !ok {
				return nil, fmt.Errorf("type not found: _int8")
			}
		
		    field2, ok := conn.TypeMap().TypeForName("_bool")
			if !ok {
				return nil, fmt.Errorf("type not found: _bool")
			}
		
		    field3, ok := conn.TypeMap().TypeForName("_float8")
			if !ok {
				return nil, fmt.Errorf("type not found: _float8")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "texts",
						Type: field0,
					},
				
					{
						Name: "int8s",
						Type: field1,
					},
				
					{
						Name: "bools",
						Type: field2,
					},
				
					{
						Name: "floats",
						Type: field3,
					},
				
			},
		}, nil
	}

	func register_newArrays(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"arrays\"",
		)
		if err != nil {
			return fmt.Errorf("newArrays failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newArrays) 
	}
	


	// codec_newBlocks is a codec for the composite type of the same name
	func codec_newBlocks(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("int4")
			if !ok {
				return nil, fmt.Errorf("type not found: int4")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("int8")
			if !ok {
				return nil, fmt.Errorf("type not found: int8")
			}
		
		    field2, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "id",
						Type: field0,
					},
				
					{
						Name: "screenshot_id",
						Type: field1,
					},
				
					{
						Name: "body",
						Type: field2,
					},
				
			},
		}, nil
	}

	func register_newBlocks(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"blocks\"",
		)
		if err != nil {
			return fmt.Errorf("newBlocks failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newBlocks) 
	}
	


	// codec_newUserEmail is a codec for the composite type of the same name
	func codec_newUserEmail(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("citext")
			if !ok {
				return nil, fmt.Errorf("type not found: citext")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "id",
						Type: field0,
					},
				
					{
						Name: "email",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newUserEmail(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"user_email\"",
		)
		if err != nil {
			return fmt.Errorf("newUserEmail failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newUserEmail) 
	}
	


	// codec_newBlocksArray is a codec for the composite type of the same name
	func codec_newBlocksArray(conn RegisterConn) (pgtype.Codec, error) {
		elementType, ok := conn.TypeMap().TypeForName("blocks")
		if !ok {
			return nil, fmt.Errorf("type not found: blocks")
		}

		return &pgtype.ArrayCodec{
			ElementType: elementType,
		}, nil
	}

	func register_newBlocksArray(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"_blocks\"",
		)
		if err != nil {
			return fmt.Errorf("newBlocksArray failed to load type: %w", err)
		}

		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newBlocksArray) 
	}
	

const searchScreenshotsSQL = `SELECT
  ss.id,
  array_agg(bl) AS blocks
FROM screenshots ss
  JOIN blocks bl ON bl.screenshot_id = ss.id
WHERE bl.body LIKE $1 || '%'
GROUP BY ss.id
ORDER BY ss.id
LIMIT $2 OFFSET $3;`

type SearchScreenshotsParams struct {
	Body   string `json:"Body"`
	Limit  int    `json:"Limit"`
	Offset int    `json:"Offset"`
}

type SearchScreenshotsRow struct {
	ID     int      `json:"id"`
	Blocks []Blocks `json:"blocks"`
}

// SearchScreenshots implements Querier.SearchScreenshots.
func (q *DBQuerier) SearchScreenshots(ctx context.Context, params SearchScreenshotsParams) ([]SearchScreenshotsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SearchScreenshots")
	rows, err := q.conn.Query(ctx, searchScreenshotsSQL, params.Body, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query SearchScreenshots: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (SearchScreenshotsRow, error) {
		var item SearchScreenshotsRow
		if err := row.Scan(&item.ID, // 'id', 'ID', 'int', '', 'int'
			&item.Blocks, // 'blocks', 'Blocks', '[]Blocks', 'github.com/robbert229/pggen/example/citext', '[]Blocks'
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const searchScreenshotsOneColSQL = `SELECT
  array_agg(bl) AS blocks
FROM screenshots ss
  JOIN blocks bl ON bl.screenshot_id = ss.id
WHERE bl.body LIKE $1 || '%'
GROUP BY ss.id
ORDER BY ss.id
LIMIT $2 OFFSET $3;`

type SearchScreenshotsOneColParams struct {
	Body   string `json:"Body"`
	Limit  int    `json:"Limit"`
	Offset int    `json:"Offset"`
}

// SearchScreenshotsOneCol implements Querier.SearchScreenshotsOneCol.
func (q *DBQuerier) SearchScreenshotsOneCol(ctx context.Context, params SearchScreenshotsOneColParams) ([][]Blocks, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "SearchScreenshotsOneCol")
	rows, err := q.conn.Query(ctx, searchScreenshotsOneColSQL, params.Body, params.Limit, params.Offset)
	if err != nil {
		return nil, fmt.Errorf("query SearchScreenshotsOneCol: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) ([]Blocks, error) {
		var item []Blocks
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const insertScreenshotBlocksSQL = `WITH screens AS (
  INSERT INTO screenshots (id) VALUES ($1)
    ON CONFLICT DO NOTHING
)
INSERT
INTO blocks (screenshot_id, body)
VALUES ($1, $2)
RETURNING id, screenshot_id, body;`

type InsertScreenshotBlocksRow struct {
	ID           int    `json:"id"`
	ScreenshotID int    `json:"screenshot_id"`
	Body         string `json:"body"`
}

// InsertScreenshotBlocks implements Querier.InsertScreenshotBlocks.
func (q *DBQuerier) InsertScreenshotBlocks(ctx context.Context, screenshotID int, body string) (InsertScreenshotBlocksRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertScreenshotBlocks")
	rows, err := q.conn.Query(ctx, insertScreenshotBlocksSQL, screenshotID, body)
	if err != nil {
		return InsertScreenshotBlocksRow{}, fmt.Errorf("query InsertScreenshotBlocks: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (InsertScreenshotBlocksRow, error) {
		var item InsertScreenshotBlocksRow
		if err := row.Scan(&item.ID, // 'id', 'ID', 'int', '', 'int'
			&item.ScreenshotID, // 'screenshot_id', 'ScreenshotID', 'int', '', 'int'
			&item.Body, // 'body', 'Body', 'string', '', 'string'
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const arraysInputSQL = `SELECT $1::arrays;`

// ArraysInput implements Querier.ArraysInput.
func (q *DBQuerier) ArraysInput(ctx context.Context, arrays Arrays) (Arrays, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ArraysInput")
	rows, err := q.conn.Query(ctx, arraysInputSQL, arrays)
	if err != nil {
		return Arrays{}, fmt.Errorf("query ArraysInput: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (Arrays, error) {
		var item Arrays
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const userEmailsSQL = `SELECT ('foo', 'bar@example.com')::user_email;`

// UserEmails implements Querier.UserEmails.
func (q *DBQuerier) UserEmails(ctx context.Context) (UserEmail, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "UserEmails")
	rows, err := q.conn.Query(ctx, userEmailsSQL)
	if err != nil {
		return UserEmail{}, fmt.Errorf("query UserEmails: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (UserEmail, error) {
		var item UserEmail
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
