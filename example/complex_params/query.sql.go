// Code generated by pggen. DO NOT EDIT.

package complex_params

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	ParamArrayInt(ctx context.Context, ints []int) ([]int, error)

	ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error)

	ParamNested2(ctx context.Context, image ProductImageType) (ProductImageType, error)

	ParamNested2Array(ctx context.Context, images []ProductImageType) ([]ProductImageType, error)

	ParamNested3(ctx context.Context, imageSet ProductImageSetType) (ProductImageSetType, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn RegisterConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

type RegisterConn interface {
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

func Register(ctx context.Context, conn RegisterConn) error {
  

	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}



// Dimensions represents the Postgres composite type "dimensions".
type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
}

// ProductImageSetType represents the Postgres composite type "product_image_set_type".
type ProductImageSetType struct {
	Name      string              `json:"name"`
	OrigImage *ProductImageType   `json:"orig_image"`
	Images    []*ProductImageType `json:"images"`
}

// ProductImageType represents the Postgres composite type "product_image_type".
type ProductImageType struct {
	Source     string      `json:"source"`
	Dimensions *Dimensions `json:"dimensions"`
}




	// codec_newDimensions is a codec for the composite type of the same name
	func codec_newDimensions(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("int4")
			if !ok {
				return nil, fmt.Errorf("type not found: int4")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("int4")
			if !ok {
				return nil, fmt.Errorf("type not found: int4")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "width",
						Type: field0,
					},
				
					{
						Name: "height",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newDimensions(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"dimensions\"",
		)
		if err != nil {
			return fmt.Errorf("newDimensions failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newDimensions) 
	}
	


	// codec_newProductImageSetType is a codec for the composite type of the same name
	func codec_newProductImageSetType(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("product_image_type")
			if !ok {
				return nil, fmt.Errorf("type not found: product_image_type")
			}
		
		    field2, ok := conn.TypeMap().TypeForName("_product_image_type")
			if !ok {
				return nil, fmt.Errorf("type not found: _product_image_type")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "name",
						Type: field0,
					},
				
					{
						Name: "orig_image",
						Type: field1,
					},
				
					{
						Name: "images",
						Type: field2,
					},
				
			},
		}, nil
	}

	func register_newProductImageSetType(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"product_image_set_type\"",
		)
		if err != nil {
			return fmt.Errorf("newProductImageSetType failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newProductImageSetType) 
	}
	


	// codec_newProductImageType is a codec for the composite type of the same name
	func codec_newProductImageType(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("dimensions")
			if !ok {
				return nil, fmt.Errorf("type not found: dimensions")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "source",
						Type: field0,
					},
				
					{
						Name: "dimensions",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newProductImageType(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"product_image_type\"",
		)
		if err != nil {
			return fmt.Errorf("newProductImageType failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newProductImageType) 
	}
	


	// codec_newProductImageTypePtrArray is a codec for the composite type of the same name
	func codec_newProductImageTypePtrArray(conn RegisterConn) (pgtype.Codec, error) {
		elementType, ok := conn.TypeMap().TypeForName("product_image_type")
		if !ok {
			return nil, fmt.Errorf("type not found: product_image_type")
		}

		return &pgtype.ArrayCodec{
			ElementType: elementType,
		}, nil
	}

	func register_newProductImageTypePtrArray(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"_product_image_type\"",
		)
		if err != nil {
			return fmt.Errorf("newProductImageTypePtrArray failed to load type: %w", err)
		}

		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newProductImageTypePtrArray) 
	}
	


	// codec_newProductImageTypeArray is a codec for the composite type of the same name
	func codec_newProductImageTypeArray(conn RegisterConn) (pgtype.Codec, error) {
		elementType, ok := conn.TypeMap().TypeForName("product_image_type")
		if !ok {
			return nil, fmt.Errorf("type not found: product_image_type")
		}

		return &pgtype.ArrayCodec{
			ElementType: elementType,
		}, nil
	}

	func register_newProductImageTypeArray(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"_product_image_type\"",
		)
		if err != nil {
			return fmt.Errorf("newProductImageTypeArray failed to load type: %w", err)
		}

		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newProductImageTypeArray) 
	}
	

const paramArrayIntSQL = `SELECT $1::bigint[];`

// ParamArrayInt implements Querier.ParamArrayInt.
func (q *DBQuerier) ParamArrayInt(ctx context.Context, ints []int) ([]int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamArrayInt")
	rows, err := q.conn.Query(ctx, paramArrayIntSQL, ints)
	if err != nil {
		return nil, fmt.Errorf("query ParamArrayInt: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ([]int, error) {
  var item []int
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested1SQL = `SELECT $1::dimensions;`

// ParamNested1 implements Querier.ParamNested1.
func (q *DBQuerier) ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested1")
	rows, err := q.conn.Query(ctx, paramNested1SQL, dimensions)
	if err != nil {
		return Dimensions{}, fmt.Errorf("query ParamNested1: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (Dimensions, error) {
  var item Dimensions
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested2SQL = `SELECT $1::product_image_type;`

// ParamNested2 implements Querier.ParamNested2.
func (q *DBQuerier) ParamNested2(ctx context.Context, image ProductImageType) (ProductImageType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested2")
	rows, err := q.conn.Query(ctx, paramNested2SQL, image)
	if err != nil {
		return ProductImageType{}, fmt.Errorf("query ParamNested2: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (ProductImageType, error) {
  var item ProductImageType
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested2ArraySQL = `SELECT $1::product_image_type[];`

// ParamNested2Array implements Querier.ParamNested2Array.
func (q *DBQuerier) ParamNested2Array(ctx context.Context, images []ProductImageType) ([]ProductImageType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested2Array")
	rows, err := q.conn.Query(ctx, paramNested2ArraySQL, images)
	if err != nil {
		return nil, fmt.Errorf("query ParamNested2Array: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ([]ProductImageType, error) {
  var item []ProductImageType
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested3SQL = `SELECT $1::product_image_set_type;`

// ParamNested3 implements Querier.ParamNested3.
func (q *DBQuerier) ParamNested3(ctx context.Context, imageSet ProductImageSetType) (ProductImageSetType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested3")
	rows, err := q.conn.Query(ctx, paramNested3SQL, imageSet)
	if err != nil {
		return ProductImageSetType{}, fmt.Errorf("query ParamNested3: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (ProductImageSetType, error) {
  var item ProductImageSetType
		if err := row.Scan(&item,
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
