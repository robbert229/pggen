// Code generated by pggen. DO NOT EDIT.

package complex_params

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
	"sync"
)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	ParamArrayInt(ctx context.Context, ints []int) ([]int, error)

	ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error)

	ParamNested2(ctx context.Context, image ProductImageType) (ProductImageType, error)

	ParamNested2Array(ctx context.Context, images []ProductImageType) ([]ProductImageType, error)

	ParamNested3(ctx context.Context, imageSet ProductImageSetType) (ProductImageSetType, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn *pgx.Conn) *DBQuerier {
	_ = conn

	return &DBQuerier{
		conn: conn, 
	}
}

// Dimensions represents the Postgres composite type "dimensions".
type Dimensions struct {
	Width  int `json:"width"`
	Height int `json:"height"`
}

// ProductImageSetType represents the Postgres composite type "product_image_set_type".
type ProductImageSetType struct {
	Name      string             `json:"name"`
	OrigImage ProductImageType   `json:"orig_image"`
	Images    []ProductImageType `json:"images"`
}

// ProductImageType represents the Postgres composite type "product_image_type".
type ProductImageType struct {
	Source     string     `json:"source"`
	Dimensions Dimensions `json:"dimensions"`
}


func register(conn *pgx.Conn){
	//
}



/*type compositeField struct {
	name       string                 // name of the field
	typeName   string                 // Postgres type name
	defaultCodec pgtype.Codec // default value to use
}

func (tr *typeResolver) newCompositeValue(name string, fields ...compositeField) pgtype.Codec {
	if _, codec, ok := tr.findCodec(name); ok {
		return codec
	}

	codecs := make([]pgtype.CompositeCodecField, len(fields))
	isBinaryOk := true
	
	for i, field := range fields {
		oid, codec, ok := tr.findCodec(field.typeName)
		if !ok {
			oid = pgtype.UnknownOID
			codec = field.defaultCodec
		}
		isBinaryOk = isBinaryOk && oid != pgtype.UnknownOID
		
		codecs[i] = pgtype.CompositeCodecField{
			Name: field.name,
			Type: &pgtype.Type{Codec: codec, Name: field.typeName, OID: oid},
		}
	}
	// Okay to ignore error because it's only thrown when the number of field
	// names does not equal the number of ValueTranscoders.
	codec := pgtype.CompositeCodec{Fields: codecs}
	// typ, _ := pgtype.NewCompositeTypeValues(name, fs, codecs)
	// if !isBinaryOk {
	// 	return textPreferrer{ValueTranscoder: typ, typeName: name}
	// }
	return codec
}

func (tr *typeResolver) newArrayValue(name, elemName string, defaultVal func() pgtype.ValueTranscoder) pgtype.Codec {
	if _, val, ok := tr.findCodec(name); ok {
		return val
	}
	
	pgType, ok := tr.pgMap.TypeForName(elemName)
	if !ok {
		panic("unhandled")
	}
	
	return &pgtype.ArrayCodec{ElementType: pgType}
}*/

// newDimensions creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'dimensions'.
func registernewDimensions() pgtype.Codec {
	return tr.newCompositeValue(
		"dimensions",
		compositeField{name: "width", typeName: "int4", defaultCodec: &pgtype.Int4Codec{}},
		compositeField{name: "height", typeName: "int4", defaultCodec: &pgtype.Int4Codec{}},
	)
}

// newDimensionsInit creates an initialized pgtype.ValueTranscoder for the
// Postgres composite type 'dimensions' to encode query parameters.
func registernewDimensionsInit(v Dimensions) pgtype.Codec {
	return tr.setCodec(tr.newDimensions(), tr.newDimensionsRaw(v))
}

// newDimensionsRaw returns all composite fields for the Postgres composite
// type 'dimensions' as a slice of interface{} to encode query parameters.
func registernewDimensionsRaw(v Dimensions) []interface{} {
	return []interface{}{
		v.Width,
		v.Height,
	}
}

// newProductImageSetType creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'product_image_set_type'.
func registernewProductImageSetType() pgtype.Codec {
	return tr.newCompositeValue(
		"product_image_set_type",
		compositeField{name: "name", typeName: "text", defaultCodec: &pgtype.TextCodec{}},
		compositeField{name: "orig_image", typeName: "product_image_type", defaultCodec: tr.newProductImageType()},
		compositeField{name: "images", typeName: "_product_image_type", defaultCodec: tr.newProductImageTypeArray()},
	)
}

// newProductImageSetTypeInit creates an initialized pgtype.ValueTranscoder for the
// Postgres composite type 'product_image_set_type' to encode query parameters.
func registernewProductImageSetTypeInit(v ProductImageSetType) pgtype.Codec {
	return tr.setCodec(tr.newProductImageSetType(), tr.newProductImageSetTypeRaw(v))
}

// newProductImageSetTypeRaw returns all composite fields for the Postgres composite
// type 'product_image_set_type' as a slice of interface{} to encode query parameters.
func registernewProductImageSetTypeRaw(v ProductImageSetType) []interface{} {
	return []interface{}{
		v.Name,
		tr.newProductImageTypeRaw(v.OrigImage),
		tr.newProductImageTypeArrayRaw(v.Images),
	}
}

// newProductImageType creates a new pgtype.ValueTranscoder for the Postgres
// composite type 'product_image_type'.
func registernewProductImageType() pgtype.Codec {
	return tr.newCompositeValue(
		"product_image_type",
		compositeField{name: "source", typeName: "text", defaultCodec: &pgtype.TextCodec{}},
		compositeField{name: "dimensions", typeName: "dimensions", defaultCodec: tr.newDimensions()},
	)
}

// newProductImageTypeInit creates an initialized pgtype.ValueTranscoder for the
// Postgres composite type 'product_image_type' to encode query parameters.
func registernewProductImageTypeInit(v ProductImageType) pgtype.Codec {
	return tr.setCodec(tr.newProductImageType(), tr.newProductImageTypeRaw(v))
}

// newProductImageTypeRaw returns all composite fields for the Postgres composite
// type 'product_image_type' as a slice of interface{} to encode query parameters.
func registernewProductImageTypeRaw(v ProductImageType) []interface{} {
	return []interface{}{
		v.Source,
		tr.newDimensionsRaw(v.Dimensions),
	}
}

// newProductImageTypeArray creates a new pgtype.Codec for the Postgres
// '_product_image_type' array type.
func registernewProductImageTypeArray() pgtype.Codec {
	return tr.newArrayValue("_product_image_type", "product_image_type", tr.newProductImageType)
}

// newProductImageTypeArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_product_image_type' to encode query parameters.
func registernewProductImageTypeArrayInit(ps []ProductImageType) pgtype.ValueTranscoder {
	dec := tr.newProductImageTypeArray()
	if err := dec.Set(tr.newProductImageTypeArrayRaw(ps)); err != nil {
		panic("encode []ProductImageType: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_product_image_type"}
}

// newProductImageTypeArrayRaw returns all elements for the Postgres array type '_product_image_type'
// as a slice of interface{} for use with the pgtype.Value Set method.
func registernewProductImageTypeArrayRaw(vs []ProductImageType) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newProductImageTypeRaw(v)
	}
	return elems
}

const paramArrayIntSQL = `SELECT $1::bigint[];`

// ParamArrayInt implements Querier.ParamArrayInt.
func (q *DBQuerier) ParamArrayInt(ctx context.Context, ints []int) ([]int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamArrayInt")
	rows, err := q.conn.Query(ctx, paramArrayIntSQL, ints)
	if err != nil {
		return nil, fmt.Errorf("query ParamArrayInt: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ([]int, error) {
		var item []int
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested1SQL = `SELECT $1::dimensions;`

// ParamNested1 implements Querier.ParamNested1.
func (q *DBQuerier) ParamNested1(ctx context.Context, dimensions Dimensions) (Dimensions, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested1")
	rows, err := q.conn.Query(ctx, paramNested1SQL, q.types.newDimensionsInit(dimensions))
	if err != nil {
		return Dimensions{}, fmt.Errorf("query ParamNested1: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (Dimensions, error) {
		var item Dimensions
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested2SQL = `SELECT $1::product_image_type;`

// ParamNested2 implements Querier.ParamNested2.
func (q *DBQuerier) ParamNested2(ctx context.Context, image ProductImageType) (ProductImageType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested2")
	rows, err := q.conn.Query(ctx, paramNested2SQL, q.types.newProductImageTypeInit(image))
	if err != nil {
		return ProductImageType{}, fmt.Errorf("query ParamNested2: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (ProductImageType, error) {
		var item ProductImageType
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested2ArraySQL = `SELECT $1::product_image_type[];`

// ParamNested2Array implements Querier.ParamNested2Array.
func (q *DBQuerier) ParamNested2Array(ctx context.Context, images []ProductImageType) ([]ProductImageType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested2Array")
	rows, err := q.conn.Query(ctx, paramNested2ArraySQL, q.types.newProductImageTypeArrayInit(images))
	if err != nil {
		return nil, fmt.Errorf("query ParamNested2Array: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) ([]ProductImageType, error) {
		var item []ProductImageType
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const paramNested3SQL = `SELECT $1::product_image_set_type;`

// ParamNested3 implements Querier.ParamNested3.
func (q *DBQuerier) ParamNested3(ctx context.Context, imageSet ProductImageSetType) (ProductImageSetType, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "ParamNested3")
	rows, err := q.conn.Query(ctx, paramNested3SQL, q.types.newProductImageSetTypeInit(imageSet))
	if err != nil {
		return ProductImageSetType{}, fmt.Errorf("query ParamNested3: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (ProductImageSetType, error) {
		var item ProductImageSetType
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

type scanCacheKey struct {
	oid      uint32
	format   int16
	typeName string
}

var (
	plans   = make(map[scanCacheKey]pgtype.ScanPlan, 16)
	plansMu sync.RWMutex
)

func planScan(codec pgtype.Codec, fd pgconn.FieldDescription, target any) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	plan = codec.PlanScan(nil, fd.DataTypeOID, fd.Format, target)
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return plan
}

type ptrScanner[T any] struct {
	basePlan pgtype.ScanPlan
}

func (s ptrScanner[T]) Scan(src []byte, dst any) error {
	if src == nil {
		return nil
	}
	d := dst.(**T)
	*d = new(T)
	return s.basePlan.Scan(src, *d)
}

func planPtrScan[T any](codec pgtype.Codec, fd pgconn.FieldDescription, target *T) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("*%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	basePlan := planScan(codec, fd, target)
	ptrPlan := ptrScanner[T]{basePlan}
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return ptrPlan
}