// Code generated by pggen. DO NOT EDIT.

package custom_types

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
	"github.com/robbert229/pggen/example/custom_types/mytype"
)

var _ genericConn = (*pgx.Conn)(nil)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	CustomTypes(ctx context.Context) (CustomTypesRow, error)

	CustomMyInt(ctx context.Context) (int, error)

	IntArray(ctx context.Context) ([][]int32, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)

	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	if err := register(ctx, conn); err != nil {
		return nil, fmt.Errorf("failed to create new querier: %w", err)
	}

	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn genericConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

func register(ctx context.Context, conn genericConn) error {
	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}

const customTypesSQL = `SELECT 'some_text', 1::bigint;`

type CustomTypesRow struct {
	Column mytype.String `json:"?column?"`
	Int8   CustomInt     `json:"int8"`
}

// CustomTypes implements Querier.CustomTypes.
func (q *DBQuerier) CustomTypes(ctx context.Context) (CustomTypesRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CustomTypes")
	rows, err := q.conn.Query(ctx, customTypesSQL)
	if err != nil {
		return CustomTypesRow{}, fmt.Errorf("query CustomTypes: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (CustomTypesRow, error) {
		var item CustomTypesRow
		if err := row.Scan(
			&item.Column, // '?column?', 'Column', 'mytype.String', 'github.com/robbert229/pggen/example/custom_types/mytype', 'String'
			&item.Int8, // 'int8', 'Int8', 'CustomInt', 'github.com/robbert229/pggen/example/custom_types', 'CustomInt'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const customMyIntSQL = `SELECT '5'::my_int as int5;`

// CustomMyInt implements Querier.CustomMyInt.
func (q *DBQuerier) CustomMyInt(ctx context.Context) (int, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CustomMyInt")
	rows, err := q.conn.Query(ctx, customMyIntSQL)
	if err != nil {
		return 0, fmt.Errorf("query CustomMyInt: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (int, error) {
		var item int
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const intArraySQL = `SELECT ARRAY ['5', '6', '7']::int[] as ints;`

// IntArray implements Querier.IntArray.
func (q *DBQuerier) IntArray(ctx context.Context) ([][]int32, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "IntArray")
	rows, err := q.conn.Query(ctx, intArraySQL)
	if err != nil {
		return nil, fmt.Errorf("query IntArray: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) ([]int32, error) {
		var item []int32
		if err := row.Scan(
			&item,
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
