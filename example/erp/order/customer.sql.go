// Code generated by pggen. DO NOT EDIT.

package order

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
	"sync"
)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	CreateTenant(ctx context.Context, key string, name string) (CreateTenantRow, error)

	FindOrdersByCustomer(ctx context.Context, customerID int32) ([]FindOrdersByCustomerRow, error)

	FindProductsInOrder(ctx context.Context, orderID int32) ([]FindProductsInOrderRow, error)

	InsertCustomer(ctx context.Context, params InsertCustomerParams) (InsertCustomerRow, error)

	InsertOrder(ctx context.Context, params InsertOrderParams) (InsertOrderRow, error)

	FindOrdersByPrice(ctx context.Context, minTotal pgtype.Numeric) ([]FindOrdersByPriceRow, error)

	FindOrdersMRR(ctx context.Context) ([]FindOrdersMRRRow, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(conn *pgx.Conn) *DBQuerier {
	_ = conn

	return &DBQuerier{
		conn: conn, 
	}
}


func register(conn *pgx.Conn){
	//
}


const createTenantSQL = `INSERT INTO tenant (tenant_id, name)
VALUES (base36_decode($1::text)::tenant_id, $2::text)
RETURNING *;`

type CreateTenantRow struct {
	TenantID int     `json:"tenant_id"`
	Rname    *string `json:"rname"`
	Name     string  `json:"name"`
}

// CreateTenant implements Querier.CreateTenant.
func (q *DBQuerier) CreateTenant(ctx context.Context, key string, name string) (CreateTenantRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "CreateTenant")
	rows, err := q.conn.Query(ctx, createTenantSQL, key, name)
	if err != nil {
		return CreateTenantRow{}, fmt.Errorf("query CreateTenant: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (CreateTenantRow, error) {
		var item CreateTenantRow
		if err := row.Scan(
			&item.TenantID, // 'tenant_id', 'TenantID', 'int', '', 'int'
			&item.Rname, // 'rname', 'Rname', '*string', '', '*string'
			&item.Name, // 'name', 'Name', 'string', '', 'string'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findOrdersByCustomerSQL = `SELECT *
FROM orders
WHERE customer_id = $1;`

type FindOrdersByCustomerRow struct {
	OrderID    int32              `json:"order_id"`
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustomerID *int32             `json:"customer_id"`
}

// FindOrdersByCustomer implements Querier.FindOrdersByCustomer.
func (q *DBQuerier) FindOrdersByCustomer(ctx context.Context, customerID int32) ([]FindOrdersByCustomerRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindOrdersByCustomer")
	rows, err := q.conn.Query(ctx, findOrdersByCustomerSQL, customerID)
	if err != nil {
		return nil, fmt.Errorf("query FindOrdersByCustomer: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindOrdersByCustomerRow, error) {
		var item FindOrdersByCustomerRow
		if err := row.Scan(
			&item.OrderID, // 'order_id', 'OrderID', 'int32', '', 'int32'
			&item.OrderDate, // 'order_date', 'OrderDate', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.OrderTotal, // 'order_total', 'OrderTotal', 'pgtype.Numeric', 'github.com/jackc/pgx/v5/pgtype', 'Numeric'
			&item.CustomerID, // 'customer_id', 'CustomerID', '*int32', '', '*int32'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const findProductsInOrderSQL = `SELECT o.order_id, p.product_id, p.name
FROM orders o
  INNER JOIN order_product op USING (order_id)
  INNER JOIN product p USING (product_id)
WHERE o.order_id = $1;`

type FindProductsInOrderRow struct {
	OrderID   *int32  `json:"order_id"`
	ProductID *int32  `json:"product_id"`
	Name      *string `json:"name"`
}

// FindProductsInOrder implements Querier.FindProductsInOrder.
func (q *DBQuerier) FindProductsInOrder(ctx context.Context, orderID int32) ([]FindProductsInOrderRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "FindProductsInOrder")
	rows, err := q.conn.Query(ctx, findProductsInOrderSQL, orderID)
	if err != nil {
		return nil, fmt.Errorf("query FindProductsInOrder: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (FindProductsInOrderRow, error) {
		var item FindProductsInOrderRow
		if err := row.Scan(
			&item.OrderID, // 'order_id', 'OrderID', '*int32', '', '*int32'
			&item.ProductID, // 'product_id', 'ProductID', '*int32', '', '*int32'
			&item.Name, // 'name', 'Name', '*string', '', '*string'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const insertCustomerSQL = `INSERT INTO customer (first_name, last_name, email)
VALUES ($1, $2, $3)
RETURNING *;`

type InsertCustomerParams struct {
	FirstName string `json:"first_name"`
	LastName  string `json:"last_name"`
	Email     string `json:"email"`
}

type InsertCustomerRow struct {
	CustomerID int32  `json:"customer_id"`
	FirstName  string `json:"first_name"`
	LastName   string `json:"last_name"`
	Email      string `json:"email"`
}

// InsertCustomer implements Querier.InsertCustomer.
func (q *DBQuerier) InsertCustomer(ctx context.Context, params InsertCustomerParams) (InsertCustomerRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertCustomer")
	rows, err := q.conn.Query(ctx, insertCustomerSQL, params.FirstName, params.LastName, params.Email)
	if err != nil {
		return InsertCustomerRow{}, fmt.Errorf("query InsertCustomer: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (InsertCustomerRow, error) {
		var item InsertCustomerRow
		if err := row.Scan(
			&item.CustomerID, // 'customer_id', 'CustomerID', 'int32', '', 'int32'
			&item.FirstName, // 'first_name', 'FirstName', 'string', '', 'string'
			&item.LastName, // 'last_name', 'LastName', 'string', '', 'string'
			&item.Email, // 'email', 'Email', 'string', '', 'string'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

const insertOrderSQL = `INSERT INTO orders (order_date, order_total, customer_id)
VALUES ($1, $2, $3)
RETURNING *;`

type InsertOrderParams struct {
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustID     int32              `json:"cust_id"`
}

type InsertOrderRow struct {
	OrderID    int32              `json:"order_id"`
	OrderDate  pgtype.Timestamptz `json:"order_date"`
	OrderTotal pgtype.Numeric     `json:"order_total"`
	CustomerID *int32             `json:"customer_id"`
}

// InsertOrder implements Querier.InsertOrder.
func (q *DBQuerier) InsertOrder(ctx context.Context, params InsertOrderParams) (InsertOrderRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "InsertOrder")
	rows, err := q.conn.Query(ctx, insertOrderSQL, params.OrderDate, params.OrderTotal, params.CustID)
	if err != nil {
		return InsertOrderRow{}, fmt.Errorf("query InsertOrder: %w", err)
	}

	return pgx.CollectExactlyOneRow(rows, func(row pgx.CollectableRow) (InsertOrderRow, error) {
		var item InsertOrderRow
		if err := row.Scan(
			&item.OrderID, // 'order_id', 'OrderID', 'int32', '', 'int32'
			&item.OrderDate, // 'order_date', 'OrderDate', 'pgtype.Timestamptz', 'github.com/jackc/pgx/v5/pgtype', 'Timestamptz'
			&item.OrderTotal, // 'order_total', 'OrderTotal', 'pgtype.Numeric', 'github.com/jackc/pgx/v5/pgtype', 'Numeric'
			&item.CustomerID, // 'customer_id', 'CustomerID', '*int32', '', '*int32'
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}

type scanCacheKey struct {
	oid      uint32
	format   int16
	typeName string
}

var (
	plans   = make(map[scanCacheKey]pgtype.ScanPlan, 16)
	plansMu sync.RWMutex
)

func planScan(codec pgtype.Codec, fd pgconn.FieldDescription, target any) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	plan = codec.PlanScan(nil, fd.DataTypeOID, fd.Format, target)
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return plan
}

type ptrScanner[T any] struct {
	basePlan pgtype.ScanPlan
}

func (s ptrScanner[T]) Scan(src []byte, dst any) error {
	if src == nil {
		return nil
	}
	d := dst.(**T)
	*d = new(T)
	return s.basePlan.Scan(src, *d)
}

func planPtrScan[T any](codec pgtype.Codec, fd pgconn.FieldDescription, target *T) pgtype.ScanPlan {
	key := scanCacheKey{fd.DataTypeOID, fd.Format, fmt.Sprintf("*%T", target)}
	plansMu.RLock()
	plan := plans[key]
	plansMu.RUnlock()
	if plan != nil {
		return plan
	}
	basePlan := planScan(codec, fd, target)
	ptrPlan := ptrScanner[T]{basePlan}
	plansMu.Lock()
	plans[key] = plan
	plansMu.Unlock()
	return ptrPlan
}