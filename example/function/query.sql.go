// Code generated by pggen. DO NOT EDIT.

package function

import (
	"context"
	"fmt"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

var _ genericConn = (*pgx.Conn)(nil)
var _ RegisterConn = (*pgx.Conn)(nil)

// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
	OutParams(ctx context.Context) ([]OutParamsRow, error)
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn RegisterConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

type RegisterConn interface {
	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

func Register(ctx context.Context, conn RegisterConn) error {
  

	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}



// ListItem represents the Postgres composite type "list_item".
type ListItem struct {
	Name  *string `json:"name"`
	Color *string `json:"color"`
}

// ListStats represents the Postgres composite type "list_stats".
type ListStats struct {
	Val1 *string  `json:"val1"`
	Val2 []*int32 `json:"val2"`
}




	// codec_newListItem is a codec for the composite type of the same name
	func codec_newListItem(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "name",
						Type: field0,
					},
				
					{
						Name: "color",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newListItem(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"list_item\"",
		)
		if err != nil {
			return fmt.Errorf("newListItem failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newListItem) 
	}
	


	// codec_newListStats is a codec for the composite type of the same name
	func codec_newListStats(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("_int4")
			if !ok {
				return nil, fmt.Errorf("type not found: _int4")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "val1",
						Type: field0,
					},
				
					{
						Name: "val2",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newListStats(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"list_stats\"",
		)
		if err != nil {
			return fmt.Errorf("newListStats failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newListStats) 
	}
	


	// codec_newListItemPtrArray is a codec for the composite type of the same name
	func codec_newListItemPtrArray(conn RegisterConn) (pgtype.Codec, error) {
		elementType, ok := conn.TypeMap().TypeForName("list_item")
		if !ok {
			return nil, fmt.Errorf("type not found: list_item")
		}

		return &pgtype.ArrayCodec{
			ElementType: elementType,
		}, nil
	}

	func register_newListItemPtrArray(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"_list_item\"",
		)
		if err != nil {
			return fmt.Errorf("newListItemPtrArray failed to load type: %w", err)
		}

		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newListItemPtrArray) 
	}
	

const outParamsSQL = `SELECT * FROM out_params();`

type OutParamsRow struct {
	Items []*ListItem `json:"_items"`
	Stats *ListStats  `json:"_stats"`
}

// OutParams implements Querier.OutParams.
func (q *DBQuerier) OutParams(ctx context.Context) ([]OutParamsRow, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "OutParams")
	rows, err := q.conn.Query(ctx, outParamsSQL)
	if err != nil {
		return nil, fmt.Errorf("query OutParams: %w", err)
	}

	return pgx.CollectRows(rows, func(row pgx.CollectableRow) (OutParamsRow, error) {
  var item OutParamsRow
		if err := row.Scan(&item.Items, // '_items', 'Items', '[]*ListItem', '', '[]*ListItem'
			&item.Stats, // '_stats', 'Stats', '*ListStats', '', '*ListStats'
			); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
}
