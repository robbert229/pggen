{{- /*gotype: github.com/robbert229/pggen/internal/codegen/golang.TemplatedFile*/ -}}
{{- define "gen_query" -}}

// Code generated by pggen. DO NOT EDIT.

package {{.GoPkg}}

import (
{{ range $pkg := .Imports }}	"{{$pkg}}"
{{ end -}}
)

var _ genericConn = (*pgx.Conn)(nil)

{{- if .IsLeader -}}
{{- "\n\n" -}}
// Querier is a typesafe Go interface backed by SQL queries.
type Querier interface {
{{- range $pkgFile := .Pkg.Files -}}
{{- range $i, $q := $pkgFile.Queries }} {{- "\n\t" -}}
	{{- if $q.Doc }}{{ $q.Doc }}	{{ end -}}
	{{.Name}}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error)
	{{- "\n" -}}
{{end -}}
{{- end -}}
}

var _ Querier = &DBQuerier{}

type DBQuerier struct {
	conn  genericConn
}

// genericConn is a connection like *pgx.Conn, pgx.Tx, or *pgxpool.Pool.
type genericConn interface {
	Query(ctx context.Context, sql string, args ...any) (pgx.Rows, error)
	QueryRow(ctx context.Context, sql string, args ...any) pgx.Row
	Exec(ctx context.Context, sql string, arguments ...any) (pgconn.CommandTag, error)

	LoadType(ctx context.Context, typeName string) (*pgtype.Type, error)
	TypeMap() *pgtype.Map
}

// NewQuerier creates a DBQuerier that implements Querier.
func NewQuerier(ctx context.Context, conn genericConn) (*DBQuerier, error) {
	if err := register(ctx, conn); err != nil {
		return nil, fmt.Errorf("failed to create new querier: %w", err)
	}

	return &DBQuerier{
		conn: conn, 
	}, nil
}

type typeHook func(ctx context.Context, conn genericConn) error

var typeHooks []typeHook

func addHook(hook typeHook) {
	typeHooks = append(typeHooks, hook)
}

func register(ctx context.Context, conn genericConn) error {
	for _, hook := range typeHooks {
		if err := hook(ctx, conn); err != nil {
			return err
		}
	}
	
	return nil
}

{{ if .NeedsVoidSupport }}
{{ template "void_utils" . }}
{{ end }}

{{- range .Declarers}}{{- "\n\n" -}}{{ .Declare $.PkgPath }}{{ end -}}

{{- end -}}

{{- range $i, $q := .Queries -}}
{{- "\n\n" -}}
const {{ $q.SQLVarName }} = {{ $q.EmitPreparedSQL }}
{{- $q.EmitParamStruct -}}
{{- $q.EmitRowStruct -}}
{{- "\n\n" -}}
// {{ $q.Name }} implements Querier.{{ $q.Name }}.
func (q *DBQuerier) {{ $q.Name }}(ctx context.Context {{- $q.EmitParams }}) ({{ $q.EmitResultType }}, error) {
	ctx = context.WithValue(ctx, "pggen_query_name", "{{ $q.Name }}")
{{- if eq $q.ResultKind ":exec" }}
	cmdTag, err := q.conn.Exec(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return {{ $q.EmitZeroResult }}, fmt.Errorf("exec query {{ $q.Name }}: %w", err)
	}
	return cmdTag, err
{{- else }}
	rows, err := q.conn.Query(ctx, {{ $q.SQLVarName }} {{- $q.EmitParamNames }})
	if err != nil {
		return {{ $q.EmitZeroResult }}, fmt.Errorf("query {{ $q.Name }}: %w", err)
	}

	return {{ $q.EmitCollectionFunc }}(rows, func(row pgx.CollectableRow) ({{ $q.EmitSingularResultType }}, error) {
		var item {{ $q.EmitSingularResultType }}
		if err := row.Scan(
			{{- range $i, $col := $q.ScanCols }}
			{{- if eq $col.QualType "" }}
			&pgVoid{},
			{{ else }}
				{{- $q.EmitScanColumn $i $col }}
			{{ end -}}
			{{- end -}}
		); err != nil {
			return item, fmt.Errorf("failed to scan: %w", err)
		}
		return item, nil
	})
{{- end }}
}
{{- end -}}
{{- "\n" -}}
{{- end -}}


{{- define "void_utils" -}}

type voidCodec struct {}

var _ pgtype.Codec = &voidCodec{}

// FormatSupported returns true if the format is supported.
func (voidCodec)  FormatSupported(int16) bool {
	return true
}

// PreferredFormat returns the preferred format.
func (voidCodec) PreferredFormat() int16 {
	return pgtype.TextFormatCode
}

// PlanEncode returns an EncodePlan for encoding value into PostgreSQL format for oid and format. If no plan can be
// found then nil is returned.
func (voidCodec) PlanEncode(m *pgtype.Map, oid uint32, format int16, value any) pgtype.EncodePlan {
	return nil
}

// PlanScan returns a ScanPlan for scanning a PostgreSQL value into a destination with the same type as target. If
// no plan can be found then nil is returned.
func (voidCodec) PlanScan(m *pgtype.Map, oid uint32, format int16, target any) pgtype.ScanPlan {
	return nil
}

// DecodeDatabaseSQLValue returns src decoded into a value compatible with the sql.Scanner interface.
func (voidCodec) DecodeDatabaseSQLValue(m *pgtype.Map, oid uint32, format int16, src []byte) (driver.Value, error) {
	return nil, nil
}

// DecodeValue returns src decoded into its default format.
func (voidCodec) DecodeValue(m *pgtype.Map, oid uint32, format int16, src []byte) (any, error) {
	return nil, nil
}

type pgVoid struct {}

// Scan implements the database/sql Scanner interface.
func (dst *pgVoid) Scan(src any) error {
	return nil
}

// Value implements the database/sql/driver Valuer interface.
func (src pgVoid) Value() (driver.Value, error) {
	return nil, nil
}

func init(){
	addHook(func(ctx context.Context, conn genericConn) error{
		conn.TypeMap().RegisterType(&pgtype.Type{
			Name: "void",
			OID: 2278,
			Codec: voidCodec{},
		})
		return nil
	})
}

{{- end -}}