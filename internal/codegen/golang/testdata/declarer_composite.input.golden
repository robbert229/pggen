// SomeTable represents the Postgres composite type "some_table".
type SomeTable struct {
	Foo    int16       `json:"foo"`
	BarBaz pgtype.Text `json:"bar_baz"`
}




	// codec_newSomeTable is a codec for the composite type of the same name
	func codec_newSomeTable(conn RegisterConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("int2")
			if !ok {
				return nil, fmt.Errorf("type not found: int2")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "foo",
						Type: field0,
					},
				
					{
						Name: "bar_baz",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newSomeTable(
		ctx context.Context,
		conn RegisterConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"some_table\"",
		)
		if err != nil {
			return fmt.Errorf("newSomeTable failed to load type: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newSomeTable) 
	}
	