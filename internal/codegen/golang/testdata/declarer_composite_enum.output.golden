// SomeTableEnum represents the Postgres composite type "some_table_enum".
type SomeTableEnum struct {
	Foo DeviceType `json:"foo"`
}


// register_newDeviceTypeEnum registers the given postgres type with pgx.
func register_newDeviceTypeEnum(
	ctx context.Context,
	conn genericConn,
) error {
	t, err := conn.LoadType(
		ctx,
		"\"device_type\"",
	)
	if err != nil {
		return fmt.Errorf("failed to load type for: %w", err)
	}
	
	conn.TypeMap().RegisterType(t)
	
	t, err = conn.LoadType(
		ctx,
		"_device_type",
	)
	if err != nil {
		return fmt.Errorf("failed to load type for: %w", err)
	}
	
	conn.TypeMap().RegisterType(t)
	
	return nil
}

func codec_newDeviceTypeEnum(conn genericConn) (pgtype.Codec, error) {
	return &pgtype.EnumCodec{}, nil
}

func init(){
	addHook(register_newDeviceTypeEnum) 
}


// DeviceType represents the Postgres enum "device_type".
type DeviceType string

const (
	DeviceTypeIOS    DeviceType = "ios"
	DeviceTypeMobile DeviceType = "mobile"
)

func (d DeviceType) String() string { return string(d) }




	// codec_newSomeTableEnum is a codec for the composite type of the same name
	func codec_newSomeTableEnum(conn genericConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("some_table_enum")
			if !ok {
				return nil, fmt.Errorf("type not found: some_table_enum")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "foo",
						Type: field0,
					},
				
			},
		}, nil
	}

	func register_newSomeTableEnum(
		ctx context.Context,
		conn genericConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"some_table_enum\"",
		)
		if err != nil {
			return fmt.Errorf("failed to load type for: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newSomeTableEnum) 
	}
	