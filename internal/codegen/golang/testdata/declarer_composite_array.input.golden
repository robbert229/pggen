// SomeTable represents the Postgres composite type "some_table".
type SomeTable struct {
	Foo    int16       `json:"foo"`
	BarBaz pgtype.Text `json:"bar_baz"`
}




	// codec_newSomeTable is a codec for the composite type of the same name
	func codec_newSomeTable(conn genericConn) (pgtype.Codec, error) {
		
		    field0, ok := conn.TypeMap().TypeForName("int2")
			if !ok {
				return nil, fmt.Errorf("type not found: int2")
			}
		
		    field1, ok := conn.TypeMap().TypeForName("text")
			if !ok {
				return nil, fmt.Errorf("type not found: text")
			}
		
		
		return &pgtype.CompositeCodec{
			Fields: []pgtype.CompositeCodecField{
				
					{
						Name: "foo",
						Type: field0,
					},
				
					{
						Name: "bar_baz",
						Type: field1,
					},
				
			},
		}, nil
	}

	func register_newSomeTable(
		ctx context.Context,
		conn genericConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"some_table\"",
		)
		if err != nil {
			return fmt.Errorf("failed to load type for: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newSomeTable) 
	}
	

// newSomeTableRaw returns all composite fields for the Postgres composite
// type 'some_table' as a slice of interface{} to encode query parameters.
func registernewSomeTableRaw(v SomeTable) []interface{} {
	return []interface{}{
		v.Foo,
		v.BarBaz,
	}
}


	// codec_newSomeTableArray is a codec for the composite type of the same name
	func codec_newSomeTableArray(conn genericConn) (pgtype.Codec, error) {
		elementType, ok := conn.TypeMap().TypeForName("some_table")
		if !ok {
			return nil, fmt.Errorf("type not found: some_table")
		}

		return &pgtype.ArrayCodec{
			ElementType: elementType,
		}, nil
	}

	func register_newSomeTableArray(
		ctx context.Context,
		conn genericConn,
	) error {
		t, err := conn.LoadType(
			ctx,
			"\"_some_array\"",
		)
		if err != nil {
			return fmt.Errorf("failed to load type for: %w", err)
		}
		
		conn.TypeMap().RegisterType(t)

		return nil
	}

	func init(){
		addHook(register_newSomeTableArray) 
	}
	

// newSomeTableArrayInit creates an initialized pgtype.ValueTranscoder for the
// Postgres array type '_some_array' to encode query parameters.
func registernewSomeTableArrayInit(ps []SomeTable) pgtype.ValueTranscoder {
	dec := tr.newSomeTableArray()
	if err := dec.Set(tr.newSomeTableArrayRaw(ps)); err != nil {
		panic("encode []SomeTable: " + err.Error()) // should always succeed
	}
	return textPreferrer{ValueTranscoder: dec, typeName: "_some_array"}
}

// newSomeTableArrayRaw returns all elements for the Postgres array type '_some_array'
// as a slice of interface{} for use with the pgtype.Value Set method.
func registernewSomeTableArrayRaw(vs []SomeTable) []interface{} {
	elems := make([]interface{}, len(vs))
	for i, v := range vs {
		elems[i] = tr.newSomeTableRaw(v)
	}
	return elems
}